{"version":3,"sources":["components/ActionsPanel.js","components/Actions.js"],"names":["Timeline","lazy","ActionsPanel","lastViewedLog","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","setDate","dates","setNewUpdate","setShowUpdates","Bell","useMemo","onClick","BellOff","TimelineIcon","xmlns","viewBox","width","height","fillRule","d","useSpring","opacity","transform","config","mass","tension","friction","trail","styles","map","element","index","push","animationDelay","handleClick","useCallback","Fragment","div","className","style","interpolate","o","pointerEvents","format","utcToZonedTime","parse","Date","getTimeFromMilliseconds","t","fallback","Updates","React","memo","useState","useLocalStorage","setLastViewedLog","updates","useSWR","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","prevProps","currProps"],"mappings":"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","file":"static/js/30.a274bd95.chunk.js","sourcesContent":["import {parse, format} from 'date-fns';\r\nimport {utcToZonedTime} from 'date-fns-tz';\r\nimport React, {useMemo, useCallback, lazy, Suspense} from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport {useSpring, animated} from 'react-spring';\r\n\r\nconst Timeline = lazy(() => import('./Timeline'));\r\n\r\nconst ActionsPanel = ({\r\n  lastViewedLog,\r\n  newUpdate,\r\n  isTimelineMode,\r\n  setIsTimelineMode,\r\n  showUpdates,\r\n  setDate,\r\n  dates,\r\n  setNewUpdate,\r\n  setShowUpdates,\r\n}) => {\r\n  const Bell = useMemo(\r\n    () => (\r\n      <Icon.Bell\r\n        onClick={() => {\r\n          setShowUpdates(!showUpdates);\r\n          setNewUpdate(false);\r\n        }}\r\n      />\r\n    ),\r\n    [setNewUpdate, setShowUpdates, showUpdates]\r\n  );\r\n\r\n  const BellOff = useMemo(\r\n    () => (\r\n      <Icon.BellOff\r\n        onClick={() => {\r\n          setShowUpdates(!showUpdates);\r\n        }}\r\n      />\r\n    ),\r\n    [setShowUpdates, showUpdates]\r\n  );\r\n\r\n  const TimelineIcon = useMemo(\r\n    () => (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"-.2 -.2 17 17\"\r\n        width=\"16\"\r\n        height=\"16\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M1.643 3.143L.427 1.927A.25.25 0 000 2.104V5.75c0\r\n          .138.112.25.25.25h3.646a.25.25 0 00.177-.427L2.715\r\n          4.215a6.5 6.5 0 11-1.18 4.458.75.75 0 10-1.493.154\r\n          8.001 8.001 0 101.6-5.684zM7.75 4a.75.75 0\r\n          01.75.75v2.992l2.028.812a.75.75 0 01-.557\r\n          1.392l-2.5-1A.75.75 0 017 8.25v-3.5A.75.75\r\n          0 017.75 4z\"\r\n        ></path>\r\n      </svg>\r\n    ),\r\n    []\r\n  );\r\n\r\n  const {transform, opacity} = useSpring({\r\n    opacity: isTimelineMode ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${isTimelineMode ? 180 : 0}deg)`,\r\n    config: {mass: 5, tension: 500, friction: 80},\r\n  });\r\n\r\n  const trail = useMemo(() => {\r\n    const styles = [];\r\n\r\n    [0, 0, 0].map((element, index) => {\r\n      styles.push({\r\n        animationDelay: `${500 + index * 250}ms`,\r\n      });\r\n      return null;\r\n    });\r\n    return styles;\r\n  }, []);\r\n\r\n  const getTimeFromMilliseconds = (lastViewedLog) => {\r\n    return format(\r\n      utcToZonedTime(parse(lastViewedLog, 'T', new Date()), 'Asia/Kolkata'),\r\n      'dd MMM, p'\r\n    );\r\n  };\r\n\r\n  const handleClick = useCallback(() => {\r\n    setIsTimelineMode(true);\r\n    if (showUpdates) setShowUpdates(!showUpdates);\r\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <animated.div\r\n        className=\"actions\"\r\n        style={{\r\n          opacity: opacity.interpolate((o) => 1 - o),\r\n          transform,\r\n          pointerEvents: isTimelineMode ? 'none' : '',\r\n        }}\r\n      >\r\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${getTimeFromMilliseconds(\r\n          lastViewedLog\r\n        )} IST`}</h5>\r\n\r\n        <div className=\"bell-icon fadeInUp\" style={trail[1]}>\r\n          {!showUpdates ? Bell : BellOff}\r\n          {newUpdate && <div className=\"indicator\"></div>}\r\n        </div>\r\n\r\n        <div\r\n          className=\"timeline-icon fadeInUp\"\r\n          onClick={handleClick}\r\n          style={trail[2]}\r\n        >\r\n          {TimelineIcon}\r\n        </div>\r\n      </animated.div>\r\n\r\n      <animated.div\r\n        className=\"actions timeline\"\r\n        style={{\r\n          opacity,\r\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\r\n          pointerEvents: !isTimelineMode ? 'none' : '',\r\n        }}\r\n      >\r\n        {isTimelineMode && (\r\n          <Suspense fallback={<div />}>\r\n            <Timeline {...{setIsTimelineMode, setDate, dates}} />\r\n          </Suspense>\r\n        )}\r\n      </animated.div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ActionsPanel;\r\n","import ActionsPanel from './ActionsPanel';\r\n\r\nimport {fetcher} from '../utils/commonFunctions';\r\n\r\nimport React, {useState, useEffect, lazy, Suspense} from 'react';\r\nimport {useLocalStorage} from 'react-use';\r\nimport useSWR from 'swr';\r\n\r\nconst Updates = lazy(() => import('./Updates'));\r\n\r\nconst Actions = ({setDate, dates}) => {\r\n  const [showUpdates, setShowUpdates] = useState(false);\r\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\r\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\r\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\r\n\r\n  const {data: updates} = useSWR(\r\n    'https://api.covid19india.org/updatelog/log.json',\r\n    fetcher,\r\n    {\r\n      revalidateOnFocus: true,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (updates !== undefined) {\r\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\r\n      if (lastTimestamp !== lastViewedLog) {\r\n        setNewUpdate(true);\r\n        setLastViewedLog(lastTimestamp);\r\n      }\r\n    }\r\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ActionsPanel\r\n        {...{\r\n          lastViewedLog,\r\n          newUpdate,\r\n          isTimelineMode,\r\n          setIsTimelineMode,\r\n          showUpdates,\r\n          setDate,\r\n          dates,\r\n          setNewUpdate,\r\n          setShowUpdates,\r\n        }}\r\n      />\r\n\r\n      {showUpdates && (\r\n        <Suspense fallback={<div />}>\r\n          <Updates {...{updates}} />\r\n        </Suspense>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  return true;\r\n};\r\n\r\nexport default React.memo(Actions, isEqual);\r\n"],"sourceRoot":""}